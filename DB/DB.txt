Data Base의 본질 - CRUD Create Read Update Delete
1. INPUT
	Create
	Update
	Delete
2. OUTPUT
	Read

mysql Oracle는 Relational DBMS
nosql mongoDB는 Document Store
	-> DRBMS의 한계 (많은 데이터량과 데이터 처리량이 계속적으로 증가하면 아래와 같은 문제점이 발생한다.)
		1. 스키마 문제 : 빅데이터를 RDB의 스키마에 맞춰 변경해서 넣으려면 매우 긴 시간의 down time이 발생한다.
		2. 스케일업의 한계 : RDBMS는 애초부터 스케일 아웃을 염두에 두고 설계되어있지 않아, 관계 모델과 트랜잭션의 연산, 일관성, 속성을 유지하면서 분산환경(스케일아웃)에서 RDBMS를 조작하는 것이 어렵다.

	-> 특징과 장점
		1. 거대한 Map으로서 Key-Value 형식을 지원한다.
		2. RDBMS가 데이터의 관계를 Foreign Key 등으로 정의하고 Join 등 관계형 연산을 하지만 NoSQL은 관계를 정의하지 않는다.
		3. 대용량 데이터 저장을 한다.
		4. 분산형 구조를 통해 여러 대의 서버에 분산하여 저장하고 상호 복제하여 데이터 유실이나 서비스 중지에 대비한다.
		5. Schema-Less
		6. 읽기 작업보다 쓰기 작업이 더 빠르며, 일반적으로 RDBMS에 비하여 쓰기와 읽기 성능이 빠르다.




SQL의 장점
	1. 명확하게 정의 된 스키마, 데이터 무결성 보장
	2. 관계는 각 데이터를 중복없이 한번만 저장된다.
NOSQL의 장점
	1. 스키마가 없기 떄문에, 훨씬 더 유연하다. 즉, 언제든지 저장된 데이터를 조정하고 새로운 "필드"를 추가할 수 있다.
	2. 데이터는 애플리케이션이 필요로 하는 형식으로 저장된다. 이렇게 하면 데이터를 읽어오는 속도가 빨라진다.
	3. 수직 및 수평 확장이 가능하므로 데이터베이스가 애플리케이션에서 발생시키는 모든 읽기 / 쓰기 요청을 처리할 수 있습니다.





데이터 베이스란 중복을 줄이는 것이다..
Every table in the database needs to have a single theme.
모든 표는 하나의 주제만 가지고 있어야 한다.

0000000000000000000000000000
->

https://sql-joins.leopard.in.ua/

LEFT Join
RIGHT Join

INNER Join
Full outer join



Left Outer Join
- 줄여서 LEFT Join

A와 B
. A에만 있는 정보를 기준으로 출력하는건 Left Outer Join이다.
SELECT * FROM topic LEFT JOIN author ON topic.author_id = author.id LEFT JOIN profile ON author.id = profile.pid;

A 교집합 B
INNER Join

일반적으로 JOIN은 INNER Join이다.


FULL OUTER JOIN는 합집합이며 LEFT JOIN + RIGHT JOIN 이다.

full outer join을 지원하지 않는다면 아래처럼 하면된다.
(LEFT JOIN) UNION DISTINCT (RIGHT JOIN)

EXCLUSIVE LEFT JOIN -> 배제하는것.
A - A교집합B











Data Base Modeling
Data Base Normalization


* R DBMS
mysql
Oracle는
sql Server
postgreSQL
db2
access






mysql

SELECT * FROM topic WHERE author = 'egoing';

SELECT * FROM topic WHERE author = 'egoing' ORDER BY id DESC;


mysql -uroot -p


# my sql 구조
데이터베이스서버[데이터베이스(표+표) + 데이터베이스(표+표)]

스키마란 데이터베이스의 구조와 제약조건에 관해 전반적인 명세를 기술한것


데이터베이스는 자체적인 보안을 가지고 있다.
권한 기능이 있다.


./mysql -u[username] -p[패스워드]


# (데이터베이스)스키마의 사용
CREATE DATABASE opentutorials;

DROP DATABASE opentutorials;

SHOW DATABASES;

USE opentutorials;

SQL - Structured Query Language
구조화된 질의 언어
1. SQL 언어는 쉽다.
2. 거의 대부분 RDBMS 서버를 다룰때 사용할정도로 중요하다.
->가성비 갑


table(x축과 y축)
-수평 : 행(row, record) ->
-수직 : 열(column) -> 데이터의 타입


컬럼만들기(열만들기)
-
CREATE TABLE topic (
	id INT(11) NOT NULL AUTO_INCREMENT,
	title VARCHAR(100) NOT NULL,
	description TEXT NULL,
	created DATETIME NOT NULL,
	author VARCHAR(15) NULL,
	profile VARCHAR(200) NULL,
	PRIMARY KEY(id)
);



CURD
CREATE
UPDATE
READ
DELETE

SHOW TABLES;

DESC topic;

INSERT INTO topic (title, description, created) VALUES('MySQL', 'MySQL is...', NOW());

테이블의 속성을 바꾸고자 할때.
ALTER TABLE topic MODIFY created DATETIME NULL;

created의 속성의 NOT NULL을 NULL로 바꿈

mysql> SELECT * FROM topic;
+----+-------+--------------+---------------------+--------+---------+
| id | title | description  | created             | author | profile |
+----+-------+--------------+---------------------+--------+---------+
|  1 | MySQL | MySql is ... | NULL                | NULL   | NULL    |
|  2 | MySQL | MySql is ... | 2020-07-26 20:08:55 | NULL   | NULL    |
+----+-------+--------------+---------------------+--------+---------+
2 rows in set (0.00 sec)

mysql> DELETE FROM topic WHERE id=1;
Query OK, 1 row affected (0.01 sec)

mysql> SELECT * FROM topic;
+----+-------+--------------+---------------------+--------+---------+
| id | title | description  | created             | author | profile |
+----+-------+--------------+---------------------+--------+---------+
|  2 | MySQL | MySql is ... | 2020-07-26 20:08:55 | NULL   | NULL    |
+----+-------+--------------+---------------------+--------+---------+
1 row in set (0.00 sec)

mysql> UPDATE topic SET id=1 WHERE id=2;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> SELECT * FROM topic;
+----+-------+--------------+---------------------+--------+---------+
| id | title | description  | created             | author | profile |
+----+-------+--------------+---------------------+--------+---------+
|  1 | MySQL | MySql is ... | 2020-07-26 20:08:55 | NULL   | NULL    |
+----+-------+--------------+---------------------+--------+---------+
1 row in set (0.00 sec)

mysql>



READ하는 방법
SELECT



SELECT FROM WHERE author = 'egoing';
WHERE을 통해 필요한 정보들을 가져올 수 있다.

ORDER BY는 기준이다.
ORDER BY id DESC;

SELECT * FROM topic WHERE author = 'egoing' ORDER BY id DESC;


데이터를 제약을 건다. 2건 본다.

LIMIT 2;


SELECT * FROM topic WHERE author = 'egoing' ORDER BY id DESC LIMIT 2;




UPDATE topic SET description='Oracle is ...', title='Oracle' WHERE id = 2;
- WHERE 을 안적으면 대참사가 발생한다.



DELETE FROM topic WHERE id =2;
- WHERE을 안적으면 대참사가 발생한다.





관계형 데이터베이스의 필요한가?
1. 데이터가 중복된다. -> 이를 해결
2. 중복이 없기에 높은 퍼포먼스와 쉬운 유지보수,
3. 그러나 직관적이지 않다.

--> 저장은 따로따로, 볼땐 합쳐서(Select)







topic
id, title, description, created, author_id

author
id, name, profile









CREATE TABLE topic (
	id INT(11) NOT NULL AUTO_INCREMENT,
	title VARCHAR(100) NOT NULL,
	description TEXT NULL,
	created DATETIME NOT NULL,
	author_id INT(11) NULL,
	PRIMARY KEY(id)
);


CREATE TABLE author(
	id INT(11) NOT NULL AUTO_INCREMENT,
	name VARCHAR(100) NOT NULL,
	profile VARCHAR(100) NOT NULL,
	PRIMARY KEY(id)
);




RDBMS의 KEY
- KEY는 각각의 튜플의 특성이 아니라 전체 릴레이션의 특성이다. 릴레이션의 어떠한 튜플도 동시에 키 속성에 대해 같은 값을 가질 수 없다. 키 설정은 모델링되는 실제 데이터의 제약 조건을 나타낸다. Key의 종류는 아래와 같다.
1. Super Key(슈퍼키)
	- 한 릴레이션에서 한 튜플을 유일하게 식별할 수 있도록 해주는 하나 혹은 그 이상의 속성들의 집합으로서, 꼭 필요하지 않는 부가적인 속성을 포함함 수 있다.
2. Candidate Key(후보키)
	- 최소한의 슈퍼키를 말한다.
3. Primary Key(주키)
	- 릴레이션 내에서 튜플들을 구별하기 위한 수단으로 데이터베이스 설계자에 의해 선택된 후보키를 말한다. Primary Key의 경우 선택할 때 절대 빠귀지 않거나 거의 바뀌지 않을 속성을 선택해서 설정해야한다.
4. Foreign Key(외래키)





SELECT * FROM topic LEFT JOIN author ON topic.authod_id = authod.id;
> LEFT JOIN을 사용하면 된다.


RENAME TABLE topic TO topic_backup;
SHOW TABLES;




CREATE TABLE `author`(
	`id` int(11) NOT NULL AUTO_INCREMENT,
	`name` varchar(20) NOT NULL,
	`profile` varchar(200) DEFAULT NULL,
	PRIMARY KEY (`id`)
);

INSERT INTO `author` VALUES (1, 'egoing', 'developer');
INSERT INTO `author` VALUES (2, 'duru', 'database administrator');
INSERT INTO `author` VALUES (3, 'taeho', 'data scientist, developer');

CREATE TABLE `topic` (
	`id` int(11) NOT NULL AUTO_INCREMENT,
	`title` varchar(30) NOT NULL,
	`description` text,
	`created` datetime NOT NULL,
	`author_id` int(11) DEFAULT NULL,
	PRIMARY KEY (`id`)
);

INSERT INTO `topic` VALUES (1,'MySQL','MySQL is...','2018-01-01 12:10:11',1);
INSERT INTO `topic` VALUES (2,'Oracle','Oracle is ...','2018-01-03 13:01:10',1);
INSERT INTO `topic` VALUES (3,'SQL Server','SQL Server is ...','2018-01-20 11:01:10',2);
INSERT INTO `topic` VALUES (4,'PostgreSQL','PostgreSQL is ...','2018-01-23 01:03:03',3);
INSERT INTO `topic` VALUES (5,'MongoDB','MongoDB is ...','2018-01-30 12:31:03',1);



mysql> SELECT * FROM topic LEFT JOIN author ON topic.author_id = author.id;
+----+------------+-------------------+---------------------+-----------+------+--------+---------------------------+
| id | title      | description       | created             | author_id | id   | name   | profile                   |
+----+------------+-------------------+---------------------+-----------+------+--------+---------------------------+
|  1 | MySQL      | MySQL is...       | 2018-01-01 12:10:11 |         1 |    1 | egoing | developer                 |
|  2 | Oracle     | Oracle is ...     | 2018-01-03 13:01:10 |         1 |    1 | egoing | developer                 |
|  3 | SQL Server | SQL Server is ... | 2018-01-20 11:01:10 |         2 |    2 | duru   | database administrator    |
|  4 | PostgreSQL | PostgreSQL is ... | 2018-01-23 01:03:03 |         3 |    3 | taeho  | data scientist, developer |
|  5 | MongoDB    | MongoDB is ...    | 2018-01-30 12:31:03 |         1 |    1 | egoing | developer                 |
+----+------------+-------------------+---------------------+-----------+------+--------+---------------------------+
5 rows in set (0.00 sec)


mysql> SELECT topic.id, topic.title, topic.description, topic.created, author.name, author.profile FROM topic LEFT JOIN author ON topic.author_id = author.id;
+----+------------+-------------------+---------------------+--------+---------------------------+
| id | title      | description       | created             | name   | profile                   |
+----+------------+-------------------+---------------------+--------+---------------------------+
|  1 | MySQL      | MySQL is...       | 2018-01-01 12:10:11 | egoing | developer                 |
|  2 | Oracle     | Oracle is ...     | 2018-01-03 13:01:10 | egoing | developer                 |
|  3 | SQL Server | SQL Server is ... | 2018-01-20 11:01:10 | duru   | database administrator    |
|  4 | PostgreSQL | PostgreSQL is ... | 2018-01-23 01:03:03 | taeho  | data scientist, developer |
|  5 | MongoDB    | MongoDB is ...    | 2018-01-30 12:31:03 | egoing | developer                 |
+----+------------+-------------------+---------------------+--------+---------------------------+
5 rows in set (0.00 sec)






기본적으로 콘솔은 mysql는 monitor이며
mysql workbench.


성능 문제가 발생시, index를 이용하자(색인)

데이터가 너무 많아진다면, modeling을 이용하자. -> 데이터를 효율적으로 중복없이.

backup -> 데이터를 복제해서 저장한다. -> mysqldump, binary log

cloud -> 임대해서 컴퓨터를 사용. 원격 제어를 해서 다룬다. -> 최고 엔지니어가 관리해준다. AWS RDS, GOOGLE CLOUD SQL FOR MYSQL, AZURE...

프로그래밍 -> Python mysql api, PHP mysql api, Java mysql api ...
