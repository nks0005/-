Data Base의 본질 - CRUD Create Read Update Delete
1. INPUT
	Create
	Update
	Delete
2. OUTPUT
	Read

mysql Oracle는 Relational DBMS
nosql mongoDB는 Document Store
	-> DRBMS의 한계 (많은 데이터량과 데이터 처리량이 계속적으로 증가하면 아래와 같은 문제점이 발생한다.)
		1. 스키마 문제 : 빅데이터를 RDB의 스키마에 맞춰 변경해서 넣으려면 매우 긴 시간의 down time이 발생한다.
		2. 스케일업의 한계 : RDBMS는 애초부터 스케일 아웃을 염두에 두고 설계되어있지 않아, 관계 모델과 트랜잭션의 연산, 일관성, 속성을 유지하면서 분산환경(스케일아웃)에서 RDBMS를 조작하는 것이 어렵다.

	-> 특징과 장점
		1. 거대한 Map으로서 Key-Value 형식을 지원한다.
		2. RDBMS가 데이터의 관계를 Foreign Key 등으로 정의하고 Join 등 관계형 연산을 하지만 NoSQL은 관계를 정의하지 않는다.
		3. 대용량 데이터 저장을 한다.
		4. 분산형 구조를 통해 여러 대의 서버에 분산하여 저장하고 상호 복제하여 데이터 유실이나 서비스 중지에 대비한다.
		5. Schema-Less
		6. 읽기 작업보다 쓰기 작업이 더 빠르며, 일반적으로 RDBMS에 비하여 쓰기와 읽기 성능이 빠르다.




SQL의 장점
	1. 명확하게 정의 된 스키마, 데이터 무결성 보장
	2. 관계는 각 데이터를 중복없이 한번만 저장된다.
NOSQL의 장점
	1. 스키마가 없기 떄문에, 훨씬 더 유연하다. 즉, 언제든지 저장된 데이터를 조정하고 새로운 "필드"를 추가할 수 있다.
	2. 데이터는 애플리케이션이 필요로 하는 형식으로 저장된다. 이렇게 하면 데이터를 읽어오는 속도가 빨라진다.
	3. 수직 및 수평 확장이 가능하므로 데이터베이스가 애플리케이션에서 발생시키는 모든 읽기 / 쓰기 요청을 처리할 수 있습니다.





데이터 베이스란 중복을 줄이는 것이다..
Every table in the database needs to have a single theme.
모든 표는 하나의 주제만 가지고 있어야 한다.

0000000000000000000000000000
->

https://sql-joins.leopard.in.ua/

LEFT Join
RIGHT Join

INNER Join
Full outer join



Left Outer Join
- 줄여서 LEFT Join

A와 B
. A에만 있는 정보를 기준으로 출력하는건 Left Outer Join이다.
SELECT * FROM topic LEFT JOIN author ON topic.author_id = author.id LEFT JOIN profile ON author.id = profile.pid;

A 교집합 B
INNER Join

일반적으로 JOIN은 INNER Join이다.


FULL OUTER JOIN는 합집합이며 LEFT JOIN + RIGHT JOIN 이다.

full outer join을 지원하지 않는다면 아래처럼 하면된다.
(LEFT JOIN) UNION DISTINCT (RIGHT JOIN)

EXCLUSIVE LEFT JOIN -> 배제하는것.
A - A교집합B











Data Base Modeling
Data Base Normalization


* R DBMS
mysql
Oracle는
sql Server
postgreSQL
db2
access






mysql

SELECT * FROM topic WHERE author = 'egoing';

SELECT * FROM topic WHERE author = 'egoing' ORDER BY id DESC;


mysql -uroot -p


# my sql 구조
데이터베이스서버[데이터베이스(표+표) + 데이터베이스(표+표)]

스키마란 데이터베이스의 구조와 제약조건에 관해 전반적인 명세를 기술한것


데이터베이스는 자체적인 보안을 가지고 있다.
권한 기능이 있다.


./mysql -u[username] -p[패스워드]


# (데이터베이스)스키마의 사용
CREATE DATABASE opentutorials;

DROP DATABASE opentutorials;

SHOW DATABASES;

USE opentutorials;

SQL - Structured Query Language
구조화된 질의 언어
1. SQL 언어는 쉽다.
2. 거의 대부분 RDBMS 서버를 다룰때 사용할정도로 중요하다.
->가성비 갑


table(x축과 y축)
-수평 : 행(row, record) ->
-수직 : 열(column) -> 데이터의 타입


컬럼만들기(열만들기)
-
CREATE TABLE topic (
	id INT(11) NOT NULL AUTO_INCREMENT,
	title VARCHAR(100) NOT NULL,
	description TEXT NULL,
	created DATETIME NOT NULL,
	author VARCHAR(15) NULL,
	profile VARCHAR(200) NULL,
	PRIMARY KEY(id)
);



CURD
CREATE
UPDATE
READ
DELETE

SHOW TABLES;

DESC topic;

INSERT INTO topic (title, description, created) VALUES('MySQL', 'MySQL is...', NOW());

테이블의 속성을 바꾸고자 할때.
ALTER TABLE topic MODIFY created DATETIME NULL;

created의 속성의 NOT NULL을 NULL로 바꿈

mysql> SELECT * FROM topic;
+----+-------+--------------+---------------------+--------+---------+
| id | title | description  | created             | author | profile |
+----+-------+--------------+---------------------+--------+---------+
|  1 | MySQL | MySql is ... | NULL                | NULL   | NULL    |
|  2 | MySQL | MySql is ... | 2020-07-26 20:08:55 | NULL   | NULL    |
+----+-------+--------------+---------------------+--------+---------+
2 rows in set (0.00 sec)

mysql> DELETE FROM topic WHERE id=1;
Query OK, 1 row affected (0.01 sec)

mysql> SELECT * FROM topic;
+----+-------+--------------+---------------------+--------+---------+
| id | title | description  | created             | author | profile |
+----+-------+--------------+---------------------+--------+---------+
|  2 | MySQL | MySql is ... | 2020-07-26 20:08:55 | NULL   | NULL    |
+----+-------+--------------+---------------------+--------+---------+
1 row in set (0.00 sec)

mysql> UPDATE topic SET id=1 WHERE id=2;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> SELECT * FROM topic;
+----+-------+--------------+---------------------+--------+---------+
| id | title | description  | created             | author | profile |
+----+-------+--------------+---------------------+--------+---------+
|  1 | MySQL | MySql is ... | 2020-07-26 20:08:55 | NULL   | NULL    |
+----+-------+--------------+---------------------+--------+---------+
1 row in set (0.00 sec)

mysql>



READ하는 방법
SELECT
