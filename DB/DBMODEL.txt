목적 -> 진짜 모방

. 관계형 데이터 모델링 .

표의 정보를 담는것.


* 데이터 모델링 순서
업무 파악 -> 개념적 데이터 모델링(ER 다이어그램) -> 논리적 데이터 모델링(DB표로 개념도 작성하기) -> 물리적 데이터 모델링(어떤 데이터베이스 제품? 실제 표를 만들기)



문제를 현실로부터 뜯어내서 고도의 추상화 과정을 통해 컴퓨터로 옮겨담는 구조이다.



1. 업무파악
UI를 같이 그린다.
말의 기능을 불신하자. 내가 한말을 상대가 잘 이해했는지 확인해야한다(역으로도).
-> 기획
OvenApp



2. 개념적 데이터 모델링
-> 논리적, 물리적 모델링에 큰 영향을 준다.
=> 현실에서 개념을 추출하는 필터를 제공해준다.
=> 다른사람과 대화하게 해주는 일종의 언어(Entity Relationship Diagram)

정보 -> 그룹 -> 관계
=> ERD (Entity Relationship Diagram) -> 매우 쉽게 표로 전환할 수 있다.




글[댓글[저자] + [저자]] => RDB는 내포 관계를 허용하지 않는다.
=> 이러한 내포 관계를 억지로 하면 중복이 발생한다.


$ 관계형 데이터 모델링에 어울리는건 수평적인것.
[댓글] - [글] - [저자]

JOIN을 통해 쪼개진 표들을 합칠 수 있다.


Entity -> Table.

제목.attribute + 생성일.attribute + 본문.attribute -> [글].entity.
.attribute = 표의 column이 된다.


Entity <-> Entity.
관계.

[저자] <-쓰다-> [글] <-소속-> [댓글] <-쓰다-> [저자]
=> Relation. PK, FK JOIN

Entity -> Table.
Attribute -> Column.
Tuple -> Row.
Relation -> PK, FK


UI <-> Database
기획자와 개발자는 데이터모델링이 겹친다.


1. 기획서에서 Entity를 찾아라.
[저자] : 이름, 소개
[글] : 제목, 본문
[댓글] : 이름, 댓글

Drawio web.









user_id, email, national_id, name, city
1, a@mail.com, 10001, egoing, seoul
2, b@mail.com, 10002, leezche, jeju
3. c@mail.com, 10003, egoing, jeju

(1). 후보키(candidate key)
user_id, email, national_id
(2). 기본키(primary key)
user_id
(3). 대체키(alternate key) -> secondary index로 성능 향상에 기여할 수 있다.
email, national_id






emp_no(직원번호), dept_no(부서번호), from_date(부서배정일)
1, 1, 2010
2, 1, 2011
1, 2, 2013

-> emp_no, dept_no 두 개 키를 이용하여 구분한다.(중복키)









프라이머리 키를 가리키는 속성은 외래키라고 한다.

(글) 저자 아이디 -> (저자) 아이디






* Cardinality -> 1:1 1:n n:m
담임(Kim, Lee, Park)
반(1반, 2반, 3반)
=> 양쪽 다 따져봐야한다.
=> 각 선생님은 한 반만 담임한다.
kim - 1반
=> 각 반의 담임은 한명이다.
1반 - Kim
=> 1:1관계
ERD에서는 ㅁ-ㅁ 으로 표현한다.






저자(Kim, Lee, Park)
댓글(댓글1, 댓글2, 댓글3)
=> 각 저자는 여러 글을 작성한다.
Kim - 댓글1, 댓글2, 댓글3
=> 각 댓글은 하나의 저자만 존재한다.
댓글1 - Kim, 댓글2 - Kim, 댓글3 - kim
=> 1:N 관계
Entity Relactionship Diagram 에서는 ㅁ-<-ㅁ로 표현한다.


저자(Kim, Lee, Park)
글(글1, 글2, 글3)
=> 각 저자는 여러 글을 작성한다
=> 각 글은 여러 저자가 존재한다
=> N:M 관계
ㅁ->--<-ㅁ 이렇게 두지 않고 최종적으로 연결 테이블을 만든다.




* Optionality -> 있을 수도 있고 없을 수도 있다.
저자(Kim, Lee, Park)
댓글(댓글1, 댓글2, 댓글3)
=> 저자는 댓글을 작성하지 않을 수도 있다.
===> 저자에게 댓글은 Optional이다.
ㅁ---o-ㅁ
o의 방향이 중요하다.
=> 각 댓글은 반드시 저자가 있다.댓글에게 저자는 Mandatory이다.
ㅁ+--o-ㅁ

=> 저자 댓글은 1:N이다.
ㅁ+--o<-ㅁ











$ 논리적 데이터 모델링
Entity -> Table
Attribute -> Column
Relation -> PK, FK
로 바꾸면 된다.


ER Master.

* 외래키 누구에게?
1:1 => 누가 누구한테 의존하는가? [휴먼 저자는 저자 테이블에 의존한다. 휴먼 저자는 저자 테이블의 자식 테이블이다. 저자 테이블 PK, 휴먼 저자 FK]
1:N => 외래키를 많이 주면 된다.
N:M => 제일 어렵다. [저자와 글은 N:M이다. '1,2'이렇게 하면 Join하기도 정렬하기도 어렵다. ->> 매핑 테이블을 만든다.]
==> mapping table {[1,2], [2,3], [1,3]} 이런식으로 만든다
author_id | topic_id
1         | 2
1         | 3
...





& 정규화
http://bit.ly/2wV2SFj

제 1정규화
Atomic columns.
-> 각 행의 값들이 하나하나가 원자적이여야 한다.
즉, 여러 값들을 가진 Tag의 값을 분활시킨다.


제 2정규화
No partial dependencies.
-> 테이블 상에 부분 종속성이 없어야 한다.
-> 중복 키가 없어야 한다.

제 3정규화
No transitive dependencies.
이행적 종속성은 분리해야한다.
