목적 -> 진짜 모방

. 관계형 데이터 모델링 .

표의 정보를 담는것.


* 데이터 모델링 순서
업무 파악 -> 개념적 데이터 모델링(ER 다이어그램) -> 논리적 데이터 모델링(DB표로 개념도 작성하기) -> 물리적 데이터 모델링(어떤 데이터베이스 제품? 실제 표를 만들기)



문제를 현실로부터 뜯어내서 고도의 추상화 과정을 통해 컴퓨터로 옮겨담는 구조이다.



1. 업무파악
UI를 같이 그린다.
말의 기능을 불신하자. 내가 한말을 상대가 잘 이해했는지 확인해야한다(역으로도).
-> 기획
OvenApp



2. 개념적 데이터 모델링
-> 논리적, 물리적 모델링에 큰 영향을 준다.
=> 현실에서 개념을 추출하는 필터를 제공해준다.
=> 다른사람과 대화하게 해주는 일종의 언어(Entity Relationship Diagram)

정보 -> 그룹 -> 관계
=> ERD (Entity Relationship Diagram) -> 매우 쉽게 표로 전환할 수 있다.




글[댓글[저자] + [저자]] => RDB는 내포 관계를 허용하지 않는다.
=> 이러한 내포 관계를 억지로 하면 중복이 발생한다.


$ 관계형 데이터 모델링에 어울리는건 수평적인것.
[댓글] - [글] - [저자]

JOIN을 통해 쪼개진 표들을 합칠 수 있다.


Entity -> Table.

제목.attribute + 생성일.attribute + 본문.attribute -> [글].entity.
.attribute = 표의 column이 된다.


Entity <-> Entity.
관계.

[저자] <-쓰다-> [글] <-소속-> [댓글] <-쓰다-> [저자]
=> Relation. PK, FK JOIN

Entity -> Table.
Attribute -> Column.
Tuple -> Row.
Relation -> PK, FK


UI <-> Database
기획자와 개발자는 데이터모델링이 겹친다.


1. 기획서에서 Entity를 찾아라.
[저자] : 이름, 소개
[글] : 제목, 본문
[댓글] : 이름, 댓글

Drawio web.
